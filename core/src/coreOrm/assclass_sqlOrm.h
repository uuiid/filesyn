// generated by sqlpp11-ddl2cpp 005-assclass.sql assclass_sqlOrm doodle
#ifndef DOODLE_ASSCLASS_SQLORM_H
#define DOODLE_ASSCLASS_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Assclass_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct FileName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileName;
            T& operator()() { return fileName; }
            const T& operator()() const { return fileName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct _FileClass_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "__file_class__";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T _fileClass_;
            T& operator()() { return _fileClass_; }
            const T& operator()() const { return _fileClass_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace Assclass_

  struct Assclass: sqlpp::table_t<Assclass,
               Assclass_::Id,
               Assclass_::FileName,
               Assclass_::_FileClass_>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "assclass";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T assclass;
        T& operator()() { return assclass; }
        const T& operator()() const { return assclass; }
      };
    };
  };
} // namespace doodle
#endif
