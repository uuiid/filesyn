// generated by sqlpp11-ddl2cpp 003-shot.sql shot_sqlOrm doodle
#ifndef DOODLE_SHOT_SQLORM_H
#define DOODLE_SHOT_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Shot_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct _Episodes_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "__episodes__";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T _episodes_;
            T& operator()() { return _episodes_; }
            const T& operator()() const { return _episodes_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Shot_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shot_";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shot_;
            T& operator()() { return shot_; }
            const T& operator()() const { return shot_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Shotab
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shotab";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shotab;
            T& operator()() { return shotab; }
            const T& operator()() const { return shotab; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Shot_

  struct Shot: sqlpp::table_t<Shot,
               Shot_::Id,
               Shot_::_Episodes_,
               Shot_::Shot_,
               Shot_::Shotab>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "shot";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T shot;
        T& operator()() { return shot; }
        const T& operator()() const { return shot; }
      };
    };
  };
} // namespace doodle
#endif
