// generated by sqlpp11-ddl2cpp 002-mainshot.sql mainshot_sqlOrm doodle
#ifndef DOODLE_MAINSHOT_SQLORM_H
#define DOODLE_MAINSHOT_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Mainshot_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Episods
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "episods";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T episods;
            T& operator()() { return episods; }
            const T& operator()() const { return episods; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Episodes
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "episodes";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T episodes;
            T& operator()() { return episodes; }
            const T& operator()() const { return episodes; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct Filepath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filepath";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filepath;
            T& operator()() { return filepath; }
            const T& operator()() const { return filepath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Version
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T version;
            T& operator()() { return version; }
            const T& operator()() const { return version; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Filetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filetime;
            T& operator()() { return filetime; }
            const T& operator()() const { return filetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
  } // namespace Mainshot_

  struct Mainshot: sqlpp::table_t<Mainshot,
               Mainshot_::Id,
               Mainshot_::Episods,
               Mainshot_::Episodes,
               Mainshot_::Filepath,
               Mainshot_::Version,
               Mainshot_::Filetime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mainshot";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mainshot;
        T& operator()() { return mainshot; }
        const T& operator()() const { return mainshot; }
      };
    };
  };
} // namespace doodle
#endif
