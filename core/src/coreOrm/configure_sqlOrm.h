// generated by sqlpp11-ddl2cpp 000-configure.sql configure_sqlOrm doodle
#ifndef DOODLE_CONFIGURE_SQLORM_H
#define DOODLE_CONFIGURE_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Configure_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Value2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value2;
            T& operator()() { return value2; }
            const T& operator()() const { return value2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Value3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value3;
            T& operator()() { return value3; }
            const T& operator()() const { return value3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Value4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value4;
            T& operator()() { return value4; }
            const T& operator()() const { return value4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  } // namespace Configure_

  struct Configure: sqlpp::table_t<Configure,
               Configure_::Name,
               Configure_::Value,
               Configure_::Id,
               Configure_::Value2,
               Configure_::Value3,
               Configure_::Value4>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "configure";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T configure;
        T& operator()() { return configure; }
        const T& operator()() const { return configure; }
      };
    };
  };
} // namespace doodle
#endif
