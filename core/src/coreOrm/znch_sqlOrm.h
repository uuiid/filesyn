// generated by sqlpp11-ddl2cpp 007-znch.sql znch_sqlOrm doodle
#ifndef DOODLE_ZNCH_SQLORM_H
#define DOODLE_ZNCH_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Znch_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Localname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "localname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T localname;
            T& operator()() { return localname; }
            const T& operator()() const { return localname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct _AssClass_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "__ass_class__";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T _assClass_;
            T& operator()() { return _assClass_; }
            const T& operator()() const { return _assClass_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace Znch_

  struct Znch: sqlpp::table_t<Znch,
               Znch_::Id,
               Znch_::Localname,
               Znch_::_AssClass_>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "znch";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T znch;
        T& operator()() { return znch; }
        const T& operator()() const { return znch; }
      };
    };
  };
} // namespace doodle
#endif
