// generated by sqlpp11-ddl2cpp 004-fileclass.sql fileclass_sqlOrm doodle
#ifndef DOODLE_FILECLASS_SQLORM_H
#define DOODLE_FILECLASS_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Fileclass_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct FileClass
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileClass;
            T& operator()() { return fileClass; }
            const T& operator()() const { return fileClass; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct _Shot_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "__shot__";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T _shot_;
            T& operator()() { return _shot_; }
            const T& operator()() const { return _shot_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct _Episodes_
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "__episodes__";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T _episodes_;
            T& operator()() { return _episodes_; }
            const T& operator()() const { return _episodes_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace Fileclass_

  struct Fileclass: sqlpp::table_t<Fileclass,
               Fileclass_::Id,
               Fileclass_::FileClass,
               Fileclass_::_Shot_,
               Fileclass_::_Episodes_>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "fileclass";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T fileclass;
        T& operator()() { return fileclass; }
        const T& operator()() const { return fileclass; }
      };
    };
  };
} // namespace doodle
#endif
