// generated by sqlpp11-ddl2cpp 005-shots.sql shots_sqlOrm doodle
#ifndef DOODLE_SHOTS_SQLORM_H
#define DOODLE_SHOTS_SQLORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace doodle
{
  namespace Shots_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update, sqlpp::tag::can_be_null>;
    };
    struct Shot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shot;
            T& operator()() { return shot; }
            const T& operator()() const { return shot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
    struct Shotab
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "shotab";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shotab;
            T& operator()() { return shotab; }
            const T& operator()() const { return shotab; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct EpisodesId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "episodes_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T episodesId;
            T& operator()() { return episodesId; }
            const T& operator()() const { return episodesId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  } // namespace Shots_

  struct Shots: sqlpp::table_t<Shots,
               Shots_::Id,
               Shots_::Shot,
               Shots_::Shotab,
               Shots_::EpisodesId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "shots";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T shots;
        T& operator()() { return shots; }
        const T& operator()() const { return shots; }
      };
    };
  };
} // namespace doodle
#endif
